var estream = require('../lib');
var curryN = require('ramda/src/curryN');

/**
 * Returns an Estream that maps the values from data events.
 * As opposed to `map` this will catch errors generated by the mapping function
 * and send them down the stream as an EsError
 *
 * __Signature__: `(a -> b) -> Estream -> Estream`
 *
 * @name safeMap
 * @param {Function} fn - the mapping function
 * @param {Estream} es
 * @return {Estream}
 *
 * @example
 * var estream = ES();
 * var mEstream = safeMap(add1, estream);
 */
function safeMap(fn, es) {
  return estream({
    start: function(push, error) {
      return es.on(function(event) {
        if (event.isData) {
          try {
            var mappedVal = fn(event.value);
            push(mappedVal);
          } catch (e) {
            error(e);
          }
        } else {
          push(event);
        }
      });
    }
  });
}

module.exports = curryN(2, safeMap);

